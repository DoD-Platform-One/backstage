apiVersion: v1
kind: ConfigMap
metadata:
  name: catalog-bigbang
data:
  {{- $namespace := "monitoring" }}
  {{- $ns := lookup "v1" "Namespace" .Release.Namespace $namespace }}
  {{- if $ns }}
  monitoring-catalog.yaml: |-
    # https://backstage.io/docs/features/software-catalog/descriptor-format#kind-component
    apiVersion: backstage.io/v1alpha1
    kind: Component
    metadata:
      name: monitoring
      links:
        - url: https://grafana.{{ .Values.domain }}
          title: Monitoring
          icon: dashboard
        - url: https://alertmanager.{{ .Values.domain }}
          title: Alertmanager
          icon: dashboard
        - url: https://prometheus.{{ .Values.domain }}
          title: Prometheus
          icon: dashboard
      annotations:
        grafana/dashboard-selector: "(tags @> 'prometheus-mixin' || tags @> 'alertmanager-mixin')"
        'backstage.io/kubernetes-label-selector': 'app.kubernetes.io/instance=monitoring-monitoring'
    spec:
      type: service
      lifecycle: production
      owner: guests
      system: applications
  {{- end }}
  k8s-resources.yaml: |-
    # https://backstage.io/docs/features/software-catalog/descriptor-format#kind-component
    apiVersion: backstage.io/v1alpha1
    kind: Component
    metadata:
      name: base-bigbang-resources
      description: Cluster and flux resources for deploying and running bigbang.
      annotations:
        grafana/dashboard-selector: "(tags @> 'kubernetes-mixin' || tags @> 'coredns' || tags @> 'flux')"
        backstage.io/kubernetes-label-selector: 'app=helm-controller'
    spec:
      type: website
      lifecycle: production
      owner: guests
      system: applications
      providesApis: [k8s-grpc-api]
    ---
    # https://backstage.io/docs/features/software-catalog/descriptor-format#kind-api
    apiVersion: backstage.io/v1alpha1
    kind: API
    metadata:
      name: k8s-grpc-api
    spec:
      type: grpc
      lifecycle: production
      owner: guests
      system: applications
      definition: |
        syntax = "proto3";

        service Exampler {
          rpc Example (ExampleMessage) returns (ExampleMessage) {};
        }

        message ExampleMessage {
          string example = 1;
        };
  system.yaml: |-
    # https://backstage.io/docs/features/software-catalog/descriptor-format#kind-system
    apiVersion: backstage.io/v1alpha1
    kind: System
    metadata:
      name: applications
    spec:
      owner: guests
  security.yaml: |-
    # https://backstage.io/docs/features/software-catalog/descriptor-format#kind-system
    apiVersion: backstage.io/v1alpha1
    kind: System
    metadata:
      name: security
    spec:
      owner: platform-team
  kyverno-catalog.yaml: |-
    # https://backstage.io/docs/features/software-catalog/descriptor-format#kind-component
    apiVersion: backstage.io/v1alpha1
    kind: Component
    metadata:
      name: kyverno
      annotations:
        grafana/dashboard-selector: "title == 'Kyverno Metrics' || tags @> 'Policy Reporter'"
        backstage.io/kubernetes-label-selector: 'app.kubernetes.io/name=kyverno-policies'
    spec:
      type: website
      lifecycle: production
      owner: platform-team
      system: security
      providesApis: [kyverno-policy-api]
    ---
    # https://backstage.io/docs/features/software-catalog/descriptor-format#kind-api
    apiVersion: backstage.io/v1alpha1
    kind: API
    metadata:
      name: kyverno-policy-api
      description: API for interacting with Kyverno policies.
    spec:
      type: policy
      lifecycle: production
      owner: platform-team
      system: security
      definition: |
        swagger: "2.0"
        info:
          title: Kyverno Policy API
          version: "1.0.0"
        paths:
          /policies:
            get:
              summary: List all Kyverno policies
              responses:
                "200":
                  description: A list of Kyverno policies.
                  schema:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        namespace:
                          type: string
                        spec:
                          type: object
            post:
              summary: Create a new Kyverno policy
              parameters:
                - in: body
                  name: policy
                  description: The Kyverno policy to create.
                  required: true
                  schema:
                    type: object
                    properties:
                      apiVersion:
                        type: string
                      kind:
                        type: string
                      metadata:
                        type: object
                      spec:
                        type: object
              responses:
                "201":
                  description: The created Kyverno policy.
          /policies/{name}:
            get:
              summary: Get a Kyverno policy by name
              parameters:
                - in: path
                  name: name
                  required: true
                  type: string
                  description: The name of the Kyverno policy.
              responses:
                "200":
                  description: The Kyverno policy.
                  schema:
                    type: object
                    properties:
                      name:
                        type: string
                      namespace:
                        type: string
                      spec:
                        type: object
            delete:
              summary: Delete a Kyverno policy by name
              parameters:
                - in: path
                  name: name
                  required: true
                  type: string
                  description: The name of the Kyverno policy.
              responses:
                "204":
  org.yaml: |-
    # https://backstage.io/docs/features/software-catalog/descriptor-format#kind-user
    apiVersion: backstage.io/v1alpha1
    kind: User
    metadata:
      name: guest
    spec:
      memberOf: [guests]
    ---
    apiVersion: backstage.io/v1alpha1
    kind: User
    metadata:
      name: platform
    spec:
      memberOf: [platform-team]
    ---
    # https://backstage.io/docs/features/software-catalog/descriptor-format#kind-group
    apiVersion: backstage.io/v1alpha1
    kind: Group
    metadata:
      name: guests
    spec:
      type: team
      children: []
    ---
    # https://backstage.io/docs/features/software-catalog/descriptor-format#kind-user
    apiVersion: backstage.io/v1alpha1
    kind: User
    metadata:
      name: github-user
    spec:
      profile:
        displayName: github-user
        email: user@github.com
      memberOf: [guests]
    ---
    # https://backstage.io/docs/features/software-catalog/descriptor-format#kind-group
    apiVersion: backstage.io/v1alpha1
    kind: Group
    metadata:
      name: github
    spec:
      type: team
      children: []
    
    ---
    apiVersion: backstage.io/v1alpha1
    kind: Group
    metadata:
      name: platform-team
    spec:
      type: team
      children: []
  {{- $namespace := "istio-system" }}
  {{- $ns := lookup "v1" "Namespace" .Release.Namespace $namespace }}
  {{- if $ns }}
  istio-catalog.yaml: |-
    # https://backstage.io/docs/features/software-catalog/descriptor-format#kind-component
    apiVersion: backstage.io/v1alpha1
    kind: Component
    metadata:
      name: istio
      annotations:
        grafana/dashboard-selector: "title == 'Istio Mesh Dashboard' || title == 'Istio Service Dashboard' || title == 'Istio Performance Dashboard' || title == 'Istio Wasm Extension Dashboard' || title == 'Istio Workload Dashboard'"
        backstage.io/kubernetes-label-selector: 'app=public-ingressgateway'
    spec:
      type: service
      lifecycle: production
      owner: guests
      system: applications 
  {{- end }}
  {{- $namespace := "logging" }}
  {{- $ns := lookup "v1" "Namespace" .Release.Namespace $namespace }}
  {{- if $ns }}
  logging-catalog.yaml: |-
    # https://backstage.io/docs/features/software-catalog/descriptor-format#kind-component
    apiVersion: backstage.io/v1alpha1
    kind: Component
    metadata:
      name: logging
      links:
        - url: https://loki.{{ .Values.domain }}
          title: Loki Logging endpoint
          icon: dashboard
      annotations:
        grafana/dashboard-selector: "tags @> 'loki' || title == 'Loki Dashboard quick search'"
        backstage.io/kubernetes-label-selector: 'app.kubernetes.io/name=logging-loki'
    spec:
      type: service
      lifecycle: production
      owner: guests
      system: applications
  {{- end }}
  {{- $namespace := "kiali" }}
  {{- $ns := lookup "v1" "Namespace" .Release.Namespace $namespace }}
  {{- if $ns }}
  kiali-catalog.yaml: |-
    # https://backstage.io/docs/features/software-catalog/descriptor-format#kind-component
    apiVersion: backstage.io/v1alpha1
    kind: Component
    metadata:
      name: kiali
      links:
        - url: https://kiali.{{ .Values.domain }}
          title: Kiali
          icon: dashboard
      annotations:
        grafana/dashboard-selector: "tags @> 'kiali'"
        backstage.io/kubernetes-label-selector: 'app.kubernetes.io/name=kiali'
    spec:
      type: service
      lifecycle: production
      owner: guests
      system: applications
  {{- end }}
