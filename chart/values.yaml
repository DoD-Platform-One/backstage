# Default values for the Backstage chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Global parameters
# Global Docker image parameters
# Please, note that this will override the image parameters, including dependencies, configured to use the global value
# Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass
# @default -- See below
global:
  # -- Global Docker image registry
  imageRegistry: ""

  # -- Global Docker registry secret names as an array
  #  E.g. `imagePullSecrets: [myRegistryKeySecretName]`
  imagePullSecrets: []

# Bigbang reusable anchors for defining grafana URLs within the pods environment vars and configs
grafana:
  # The following is the endpoint at which grafana API calls will be accessed through
  url: &grafanaUrl "monitoring-grafana.monitoring.svc.cluster.local"
  http: &grafanaHttp "http"

  # The following is the rewritten URL at which backstage grafana iframe will hyperlink to
  externalUrl: &grafanaExternalUrl "https://example.com"

# -- Common parameters

# -- Override Kubernetes version
kubeVersion: ""

# -- String to partially override common.names.fullname
nameOverride: ""

# -- String to fully override common.names.fullname
fullnameOverride: ""

# -- Default Kubernetes cluster domain
clusterDomain: cluster.local

# -- Labels to add to all deployed objects
commonLabels: {}

# -- Annotations to add to all deployed objects
commonAnnotations: {}

# -- Array of extra objects to deploy with the release
extraDeploy: []

# -- Enable diagnostic mode in the Deployment
diagnosticMode:

  # -- Enable diagnostic mode (all probes will be disabled and the command will be overridden)
  enabled: false

  # -- Command to override all containers in the Deployment
  command:
    - sleep

  # -- Args to override all containers in the Deployment
  args:
    - infinity

# -- Ingress parameters
ingress:

  # -- Enable the creation of the ingress resource
  enabled: false

  # -- Name of the IngressClass cluster resource which defines which controller will implement the resource (e.g nginx)
  className: ""

  # -- Additional annotations for the Ingress resource
  annotations: {}

  # -- Hostname to be used to expose the route to access the backstage application (e.g: backstage.IP.nip.io)
  host: ""

  # -- Path to be used to expose the full route to access the backstage application (e.g: IP.nip.io/backstage)
  path: "/"

  # -- Ingress TLS parameters
  tls:

    # -- Enable TLS configuration for the host defined at `ingress.host` parameter
    enabled: false

    # -- The name to which the TLS Secret will be called
    secretName: ""

# -- Backstage parameters
# @default -- See below
backstage:
  serviceAccount:
    name: "backstage"
  backstage:

    # -- Number of deployment replicas
    replicas: 1

    # -- Define the [count of deployment revisions](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#clean-up-policy) to be kept.
    # May be set to 0 in case of GitOps deployment approach.
    revisionHistoryLimit: 10

    image:

      # -- Backstage image registry
      registry: "registry1.dso.mil"

      # -- Backstage image repository
      repository: "ironbank/big-bang/backstage"

      # -- Backstage image tag (immutable tags are recommended)
      tag: "1.0.8"

      # -- Backstage image digest (digest takes precedence over image tag)
      #digest: ""

      # -- Specify a imagePullPolicy.
      # Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
      #  Ref: https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
      pullPolicy: Always

      # -- Optionally specify an array of imagePullSecrets.
      #  Secrets must be manually created in the namespace.
      #  Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      #  E.g: `pullSecrets: [myRegistryKeySecretName]`
      pullSecrets: [private-registry]


    # -- Container ports on the Deployment
    containerPorts:
      backend: 7007

    # -- Backstage container command
    command: ["node", "packages/backend"]

    # -- Backstage container command arguments
    args: ["--config", "app-config.yaml"]

    # -- Extra app configuration files to inline into command arguments
    extraAppConfig: []

    # -- Deployment sidecars
    extraContainers: []

    # -- Backstage container environment variables from existing ConfigMaps
    extraEnvVarsCM: []

    # -- Backstage container additional volume mounts
    #extraVolumeMounts: []

    # -- Backstage container additional volumes
    #extraVolumes: []

    ## Dynamic catalog configuration: the following allows catalogs to be built for bigbang based on enabled bigbang addons and packages.
    extraVolumeMounts:
      - name: catalog-bigbang
        mountPath: "/app/catalog/"
    extraVolumes:
      - name: catalog-bigbang
        configMap:
          name: catalog-bigbang

    # -- Backstage container environment variables
    #extraEnvVars: []
# Enable grafana URL endpoints so that backstage can start properly - these are required even if grafana is not
# enabled due to startup and plugin process.
    extraEnvVars:
      - name: GRAFANA_HTTP
        value: *grafanaHttp
      - name: GRAFANA_URL
        value: *grafanaUrl
      - name: GRAFANA_DOMAIN
        value: *grafanaExternalUrl

    # -- Backstage container environment variables from existing Secrets
    extraEnvVarsSecrets: []

    # -- Backstage container init containers
    initContainers: []

    # -- Directory containing the backstage installation
    installDir: /app

    # -- Resource requests/limits
    #  Ref: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#resource-requests-and-limits-of-pod-and-container
    # <!-- E.g.
    # resources:
    #   limits:
    #     memory: 1Gi
    #     cpu: 1000m
    #   requests:
    #     memory: 250Mi
    #     cpu: 100m -->
    resources:
      limits:
        cpu: 4000m
        memory: 8000Mi
      requests:
        cpu: 2000m
        memory: 4000Mi

    # -- Readiness Probe
    # Backstage doesn't provide any health endpoints by default. A simple one can be added like this: https://backstage.io/docs/plugins/observability/#health-checks
    #  Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes
    # <!-- E.g.
    # readinessProbe:
    #   failureThreshold: 3
    #   httpGet:
    #     path: /healthcheck
    #     port: 7007
    #     scheme: HTTP
    #   initialDelaySeconds: 30
    #   periodSeconds: 10
    #   successThreshold: 2
    #   timeoutSeconds: 2
    readinessProbe: {}

    # -- Liveness Probe
    # Backstage doesn't provide any health endpoints by default. A simple one can be added like this: https://backstage.io/docs/plugins/observability/#health-checks
    #  Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes
    # <!-- E.g.
    # livenessProbe:
    #   failureThreshold: 3
    #   httpGet:
    #     path: /healthcheck
    #     port: 7007
    #     scheme: HTTP
    #   initialDelaySeconds: 60
    #   periodSeconds: 10
    #   successThreshold: 1
    #   timeoutSeconds: 2
    livenessProbe: {}

      # -- Startup Probe
    # Backstage doesn't provide any health endpoints by default. A simple one can be added like this: https://backstage.io/docs/plugins/observability/#health-checks
    #  Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes
    # <!-- E.g.
    # startupProbe:
    #   failureThreshold: 3
    #   httpGet:
    #     path: /healthcheck
    #     port: 7007
    #     scheme: HTTP
    #   initialDelaySeconds: 60
    #   periodSeconds: 10
    #   successThreshold: 1
    #   timeoutSeconds: 2
    startupProbe: {}

    # -- Security settings for a Pod.
    #  The security settings that you specify for a Pod apply to all Containers in the Pod.
    #  Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    podSecurityContext: 
        runAsUser: 473
        runAsGroup: 473
        fsGroup: 473
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
        
    
    # -- Security settings for a Container.
    #  Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
    containerSecurityContext: 
        capabilities:
            drop:
              - ALL
        allowPrivilegeEscalation: false

    # Allows to define the appConfig as a multiline string that generates a ConfigMap
    # automatically, not requiring to have it pre provisioned as with the extraAppConfig key.
    # DO NOT USE if you need to put sensitive data in the appConfig.
    # E.g:
    # appConfig:
    #   app:
    #     baseUrl: https://somedomain.tld
    # -- Generates ConfigMap and configures it in the Backstage pods

    appConfig: 
      organization:
        name: "My Company"
      app:
        baseUrl: http://localhost:7007
      backend:
        baseUrl: http://localhost:7007       
      # Enable the following if utilizing `appConfig.catalog.locations.type: url, replace host with required URL.
      #  reading:
      #    allow:
      #      - host: 'repo1.dso.mil'
      auth:
        environment: development
        providers:
          # Note: enabling "dangerouslyAllowOutsideDevelopment" gives all UI access to all users
          # with no restrictions.  Recommended to configure SSO for backstage.
          guest: 
            dangerouslyAllowOutsideDevelopment: true
      proxy:
        # These values are enabled by using the grafana section near the bottom under BigBang configuration.
        # They exist as example strings if grafana is not enabled to allow backstage to start. 
        '/grafana/api':
          # May be a public or an internal DNS
          target: ${GRAFANA_HTTP}://${GRAFANA_URL}
          headers:
            Authorization: Bearer ${GRAFANA_TOKEN}

      grafana:
        # Publicly accessible domain
        domain: ${GRAFANA_DOMAIN}

        # Is unified alerting enabled in Grafana?
        # See: https://grafana.com/blog/2021/06/14/the-new-unified-alerting-system-for-grafana-everything-you-need-to-know/
        # Optional. Default: false
        unifiedAlerting: false

      kubernetes:
        # We enable all istio/kyverno resource discovery by default.
        customResources:
          - group: 'networking.istio.io'
            apiVersion: 'v1'
            plural: 'virtualservices'
          - group: 'networking.k8s.io'
            apiVersion: 'v1'
            plural: 'networkpolicies'
          - group: 'security.istio.io'
            apiVersion: 'v1'
            plural: 'authorizationpolicies'
          - group: 'security.istio.io'
            apiVersion: 'v1'
            plural: 'peerauthentications'
          - group: 'source.toolkit.fluxcd.io'
            apiVersion: 'v1'
            plural: 'helmcharts'
          - group: 'helm.toolkit.fluxcd.io'
            apiVersion: 'v2'
            plural: 'helmreleases'
          - group: 'source.toolkit.fluxcd.io'
            apiVersion: 'v1'
            plural: 'gitrepositories'
          - group: 'wgpolicyk8s.io'
            apiVersion: 'v1alpha2'
            plural: 'clusterpolicyreports'
          - group: 'wgpolicyk8s.io'
            apiVersion: 'v1alpha2'
            plural: 'policyreports'
          - group: 'kyverno.io'
            apiVersion: 'v1'
            plural: 'clusterpolicies'
        frontend:
          podDelete:
            enabled: false
        serviceLocatorMethod:
          type: 'multiTenant'
        clusterLocatorMethods:
          - type: 'config'
            clusters:
              - url: http://127.0.0.1:9999
                name: bigbang-dev
                authProvider: 'serviceAccount'
                skipTLSVerify: false
                skipMetricsLookup: true
      catalog:
        rules:
          - allow: [Component, API, System, Location, Template, User, Group]
        locations:
          - type: file
            target: ./catalog/*.yaml
          - type: file
            target: ./template/*.yaml
        # example URL type:
        #  - type: url
        #    target: https://repo1.dso.mil/big-bang/product/packages/backstage/-/raw/main/backstage/examples/org.yaml

    # -- Affinity for pod assignment
    #  Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    affinity: {}

    # -- Node labels for pod assignment
    #  Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
    nodeSelector: {}

    # -- Node tolerations for server scheduling to nodes with taints
    #  Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
    tolerations: []
    #  - key: "key"
    #    operator: "Equal|Exists"
    #    value: "value"
    #    effect: "NoSchedule|PreferNoSchedule|NoExecute"

    # -- Annotations to add to the backend deployment pods
    podAnnotations: {}

    # -- Labels to add to the backend deployment pods
    podLabels: {}

    # -- Additional custom annotations for the `Deployment` resource
    annotations: {}

## @section Traffic Exposure parameters

## Service parameters
##
# -- Service parameters
# @default -- See below
service:

  # -- Kubernetes Service type
  type: ClusterIP

  # -- Backstage svc port for client connections
  ports:
    backend: 7007

    # -- Backstage svc port name
    name: http-backend

    # -- Backstage svc target port referencing receiving pod container port
    targetPort: backend

  # -- Node port for the Backstage client connections
  # Choose port between `30000-32767`
  nodePorts:
    backend: ""

  # -- Control where client requests go, to the same pod or round-robin
  # (values: `ClientIP` or `None`)
  #  Ref: https://kubernetes.io/docs/concepts/services-networking/service/#session-stickiness
  sessionAffinity: None

  # -- Backstage service Cluster IP
  #
  #  E.g `clusterIP: None`
  clusterIP: ""

  # -- Backstage service Load Balancer IP
  #
  #  Ref: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer
  loadBalancerIP: ""

  # -- Load Balancer sources
  #
  #  Ref: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer
  #  E.g `loadBalancerSourceRanges: [10.10.10.0/24]`
  loadBalancerSourceRanges: []

  # -- Backstage service external traffic policy
  #
  # Ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  externalTrafficPolicy: Cluster

  # -- Additional custom annotations for Backstage service
  annotations: {}

  # -- Extra ports to expose in the Backstage service (normally used with the `sidecar` value)
  extraPorts: []

## @section NetworkPolicy parameters
##
networkPolicy:
  # -- Specifies whether a NetworkPolicy should be created
  enabled: false

  ## Ingress Rules
  ##
  ingressRules:

    # -- Namespace selector label allowed to access the Backstage instance
    namespaceSelector: {}

    # -- Pod selector label allowed to access the Backstage instance
    podSelector: {}

    # -- Additional custom ingress rules
    customRules: []
    #   - to:
    #       - namespaceSelector:
    #           matchLabels:
    #             label: example

  ## Egress Rules
  ##
  egressRules:

    # -- Deny external connections. Should not be enabled when working with an external database.
    denyConnectionsToExternal: false

    # -- Additional custom egress rules
    customRules: []
    #   - to:
    #       - namespaceSelector:
    #           matchLabels:
    #             label: example


# -- PostgreSQL [chart configuration](https://github.com/bitnami/charts/blob/master/bitnami/postgresql/values.yaml)
# @default -- See below
postgresql:

  # -- Switch to enable or disable the PostgreSQL integration
  enabled: false

  # -- The authentication details of the Postgres database
  auth:

    # -- Name for a custom user to create
    username: bn_backstage

    # -- Password for the custom user to create
    password: ""

    # -- Name of existing secret to use for PostgreSQL credentials
    existingSecret: ""

    # -- The secret keys Postgres will look for to retrieve the relevant password
    secretKeys:

      # -- The key in which Postgres will look for, for the admin password, in the existing Secret
      adminPasswordKey: admin-password

      # -- The key in which Postgres will look for, for the user password, in the existing Secret
      userPasswordKey: user-password

      # -- The key in which Postgres will look for, for the replication password, in the existing Secret
      replicationPasswordKey: replication-password

  # -- PostgreSQL architecture (`standalone` or `replication`)
  architecture: standalone

# -- Service Account Configuration
# @default -- See below
serviceAccount:

  # -- Enable the creation of a ServiceAccount for Backstage pods
  create: false

  # -- Name of the ServiceAccount to use
  # If not set and `serviceAccount.create` is true, a name is generated
  name: ""

  # -- Additional custom labels to the service ServiceAccount.
  labels: {}

  # -- Additional custom annotations for the ServiceAccount.
  annotations: {}

  # -- Auto-mount the service account token in the pod
  automountServiceAccountToken: true

# -- Metrics configuration
metrics:

  # -- ServiceMonitor configuration
  #  Allows configuring your backstage instance as a scrape target for [Prometheus](https://github.com/prometheus/prometheus) using a ServiceMonitor custom resource that [Prometheus Operator](https://github.com/prometheus-operator/prometheus-operator) can understand.
  serviceMonitor:

    # -- If enabled, a ServiceMonitor resource for Prometheus Operator is created
    #  Prometheus Operator must be installed in your cluster prior to enabling.
    enabled: false

    # -- ServiceMonitor annotations
    annotations: {}

    # -- Additional ServiceMonitor labels
    labels: {}

    # -- ServiceMonitor scrape interval
    interval: null

    # -- ServiceMonitor endpoint path
    #  Note that the /metrics endpoint is NOT present in a freshly scaffolded Backstage app. To setup, follow the [Prometheus metrics tutorial](https://github.com/backstage/backstage/blob/master/contrib/docs/tutorials/prometheus-metrics.md).
    path: /metrics

# BigBang configuration

# Bigbang addons.  These are upstream values from bigbang chart so typically not required to modify these.
## Helm does not carry values undeclared to child charts. Used for development purposes.

# -- Base domain to use.
domain: dev.bigbang.mil

networkPolicies:
  # -- Toggle networkPolicies
  enabled: false
  # -- Control Plane CIDR, defaults to 0.0.0.0/0, use `kubectl get endpoints -n default kubernetes` to get the CIDR range needed for your cluster
  # Must be an IP CIDR range (x.x.x.x/x - ideally with /32 for the specific IP of a single endpoint, broader range for multiple masters/endpoints)
  # Used by package NetworkPolicies to allow Kube API access
  controlPlaneCidr: 0.0.0.0/0
  additionalPolicies: []

  # -- NetworkPolicy selectors and ports for
  # egress to downstream telemetry ingestion services.
  # These should be uncommented and overridden if any
  # of these values deviate from the Big Bang defaults.
  egress: {}
    #
    # prometheus:
    #   ports:
    #     - 9090
    #   namespaceSelector:
    #     matchLabels:
    #       app.kubernetes.io/name: monitoring
    #   podSelector:
    #     matchLabels:
    #       app.kubernetes.io/name: prometheus
    # loki:
    #   ports:
    #     - 3100
    #   namespaceSelector:
    #     matchLabels:
    #       app.kubernetes.io/name: logging
    #   podSelector:
    #     matchLabels:
    #       app.kubernetes.io/name: loki-logging
    # tempo:
    #   ports:
    #     - 4317
    #   namespaceSelector:
    #     matchLabels:
    #       app.kubernetes.io/name: tempo
    #   podSelector:
    #     matchLabels:
    #       app.kubernetes.io/name: tempo
  ingressLabels:
    app: istio-ingressgateway
    istio: ingressgateway

# -- Istio configuration
istio:
  enabled: false
  hardened:
    enabled: false
    customAuthorizationPolicies: []
    outboundTrafficPolicyMode: "REGISTRY_ONLY"
    customServiceEntries: []
      # - name: "allow-google"
      #   enabled: true
      #   spec:
      #     hosts:
      #       - google.com
      #     location: MESH_EXTERNAL
      #     ports:
      #       - number: 443
      #         protocol: TLS
      #         name: https
      #     resolution: DNS

  backstage:
    gateways:
      - "istio-system/public"
    hosts:
      - backstage.{{ .Values.domain }}
  # Default backstage peer authentication
  mtls:
    # STRICT = Allow only mutual TLS traffic
    # PERMISSIVE = Allow both plain text and mutual TLS traffic
    mode: STRICT
  namespace: "istio-system"

# Big Bang Continuous Integration Testing Only
bbtests:
  enabled: false
  cypress:
    artifacts: true
    envs:
      cypress_url: "http://backstage:7007"
      cypress_timeout: "120000"
    resources:
      requests:
        cpu: 4
        memory: 4Gi
      limits:
        cpu: 4
        memory: 8Gi
